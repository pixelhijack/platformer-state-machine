{"version":3,"sources":["webpack:///webpack/bootstrap e396fe1cf2ba7f0dc3cd","webpack:///./client/src/index.js"],"names":["config","game","width","height","blocks","domElement","levels","key","exit","GameState","console","log","Phaser","State","Game","AUTO","map","state","add","level","start"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;ACtCA;AACA,KAAMA,SAAS;AACXC,WAAM;AACFC,gBAAO,GADL;AAEFC,iBAAQ,GAFN;AAGFC,iBAAQ,CAHN;AAIFC,qBAAY;AAJV,MADK;AAOXC,aAAQ,CACJ;AACIC,cAAK,MADT;AAEIC,eAAM;AAFV,MADI,EAKJ;AACID,cAAK,SADT;AAEIC,eAAM;AAFV,MALI,EASJ;AACID,cAAK,SADT;AAEIC,eAAM;AAFV,MATI,EAaJ;AACID,cAAK,WADT;AAEIC,eAAM;AAFV,MAbI;AAPG,EAAf;;KA2BMC,S;;;AACF,wBAAYT,MAAZ,EAAoB;AAAA;;AAAA;AAEnB;;;;8BACIA,M,EAAO;AACRU,qBAAQC,GAAR,CAAY,oBAAZ,EAAkCX,MAAlC;AACH;;;mCACQ;AACLU,qBAAQC,GAAR,CAAY,uBAAZ;AACH;;;kCACO;AACJD,qBAAQC,GAAR,CAAY,sBAAZ;AACH;;;kCACO;AACJD,qBAAQC,GAAR,CAAY,sBAAZ;AACH;;;;GAfmBC,OAAOC,K;;AAgB9B;;AAED,KAAMZ,OAAO,IAAIW,OAAOE,IAAX,CACTd,OAAOC,IAAP,CAAYC,KADH,EAETF,OAAOC,IAAP,CAAYE,MAFH,EAGTS,OAAOG,IAHE,EAITf,OAAOC,IAAP,CAAYI,UAJH,CAAb;;AAOA,KAAMC,SAASN,OAAOM,MAAP,CAAcU,GAAd,CACX;AAAA,YAASf,KAAKgB,KAAL,CAAWC,GAAX,CAAeC,MAAMZ,GAArB,EAA0B,IAAIE,SAAJ,CAAcT,MAAd,CAA1B,CAAT;AAAA,EADW,CAAf;;AAIAC,MAAKgB,KAAL,CAAWG,KAAX,CAAiB,MAAjB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqCpB,MAArC;;AAGA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e396fe1cf2ba7f0dc3cd","// config per level = Phaser2 GameState\nconst config = {\n    game: {\n        width: 546,\n        height: 368,\n        blocks: 3,\n        domElement: 'game'\n    }, \n    levels: [\n        {\n            key: 'menu',\n            exit: 'level 1'\n        },\n        {\n            key: 'level 1',\n            exit: 'level 2'\n        },\n        {\n            key: 'level 2',\n            exit: 'level 3'\n        },\n        {\n            key: 'game over',\n            exit: 'menu'\n        }\n    ]\n};\n\nclass GameState extends Phaser.State {\n    constructor(config)Â {\n        super();\n    }\n    init(config){\n        console.log('[ GAMESTATE ] init', config);\n    }\n    preload(){\n        console.log('[ GAMESTATE ] preload');\n    }\n    create(){\n        console.log('[ GAMESTATE ] create');\n    }\n    update(){\n        console.log('[ GAMESTATE ] update');\n    }\n};\n\nconst game = new Phaser.Game(\n    config.game.width,\n    config.game.height,\n    Phaser.AUTO,\n    config.game.domElement\n);\n\nconst levels = config.levels.map(\n    level => game.state.add(level.key, new GameState(config))\n);\n\ngame.state.start('menu', true, true, config);\n\n\n/////////////////////////////////////////////\n/*\nimport StateMachine from 'javascript-state-machine';\n\nimport Boot from './boot';\nimport Menu from './menu';\nimport Game from './game';\nimport GameOver from './gameover';\nimport GameState from './gamestate';\nimport ExtendedSprite from './extendedsprite';\nimport config from './config';\n\nconst events = [\n    {\n        event: 'PLAYER:MOVE',\n        action: (state, props) => {\n            state.player.x += props.velocity\n        }\n    },{\n\n    }\n];\n\nconst store = new StateMachine({\n    init: 'boot',\n    transitions: [\n        { name: 'initialize', from: 'boot', to: 'menu' },\n        { name: 'play',       from: 'menu', to: 'game' },\n        { name: 'abandon',    from: 'game', to: 'menu' },\n        { name: 'lose',       from: 'game', to: 'menu' }\n    ],\n    data: {\n\n    },\n    methods: {\n        onAbandon: () => { console.log('[STATE] onAbandon'); },\n        onLose: () => { console.log('[STATE] onLose'); },\n        onPlay: (lifecycle, level) => {\n            console.log('[STATE] onPlay');\n            game.state.start('Game', true, true, {\n                config: config,\n                keyboardEvents: {\n                    'SPACE': 'PLAYER:HIT',\n                    'ARROWUP': 'PLAYER:JUMP',\n                    'ARROWDOWN': 'PLAYER:DUCK',\n                    'ARROWLEFT': 'PLAYER:LEFT',\n                    'ARROWRIGHT': 'PLAYER:RIGHT'\n                },\n                events: [\n                    {\n                        type: 'GAME:ABANDON',\n                        action: function() {\n                            store.abandon();\n                        }\n                    },{\n                        type: 'GAME:OVER',\n                        action: function() {\n                            store.lose();\n                        }\n                    },{\n                        type: 'PLAYER:HIT',\n                        action: function(event) {\n                            this.PLAYER.hit();\n                        }\n                    },{\n                        type: 'PLAYER:JUMP',\n                        action: function(event) {\n                            this.PLAYER.jump();\n                        }\n                    },{\n                        type: 'PLAYER:DUCK',\n                        action: function(event) {\n                            this.PLAYER.duck();\n                        }\n                    },{\n                        type: 'PLAYER:LEFT',\n                        action: function(event) {\n                            this.PLAYER.moveLeft();\n                        }\n                    },{\n                        type: 'PLAYER:RIGHT',\n                        action: function(event) {\n                            this.PLAYER.moveRight();\n                        }\n                    }\n                ]\n            });\n        },\n        onInitialize: (lifecycle, config) => {\n            console.log('[STATE] onInitialize', lifecycle, config);\n            game.state.add('Boot', Boot);\n            game.state.add('Menu', Menu);\n            game.state.add('Game', Game);\n            game.state.add('GameOver', GameState);\n            game.state.start('Menu', true, true, {\n                config: config,\n                keyboardEvents: {\n                    'SPACE': 'GAME:START'\n                },\n                events: [\n                    { type: 'GAME:START', action: function() { store.play()} }\n                ]\n            });\n        }\n    }\n});\n\nstore.initialize(config);\n*/\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/index.js"],"sourceRoot":""}